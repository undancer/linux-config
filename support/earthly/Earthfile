VERSION 0.7

FROM library/alpine:3.18

COPY_SELF:
  COMMAND
  # COPY --if-exists ./output/*.* ./output
  # COPY --dir --if-exists ./output/dl ./dl
  # COPY --dir --if-exists ./output/ccache ./ccache

  COPY --if-exists ./output/dl /buildroot/dl
  COPY --if-exists ./output/ccache ./.buildroot-ccache

  COPY . .


SAVE_SELF:
  COMMAND
  ARG output

  SAVE ARTIFACT --if-exists ./output/*.* AS LOCAL ./output/
  SAVE ARTIFACT --if-exists ./output/images/ AS LOCAL ./output/images
  SAVE ARTIFACT --if-exists /buildroot/dl/* AS LOCAL ./output/dl/
  SAVE ARTIFACT --if-exists ./.buildroot-ccache/* AS LOCAL ./output/ccache/

  # SAVE ARTIFACT --if-exists ./output/*.* AS LOCAL ./output/
  # # FOR dir IN $(ls -d ./output/*)
  # #   IF [ -d $dir ]
  # #     RUN base=$(basename $dir)
  # #     RUN echo ">>>> $base"
  # #     IF [ "$base" = "images" ]
  # #       RUN echo "SAVE ARTIFACT --if-exists ./output/$base/* AS LOCAL ./output/$base/"
  # #       SAVE ARTIFACT --if-exists ./output/$base/* AS LOCAL ./output/$base/
  # #     # ELSE
  # #     END
  # #   END
  # # END
  # # IF [ -d ./output ]
  # #   RUN ls -d ./output/*
  # # END

  # # IF [ -d ./output/images ]
  # #   RUN ls -d ./output/images/*
  # # END

  # SAVE ARTIFACT --if-exists ./output/images/* AS LOCAL ./output/images/
  # SAVE ARTIFACT --if-exists ./dl/* AS LOCAL ./output/dl/
  # SAVE ARTIFACT --if-exists ./ccache/* AS LOCAL ./output/ccache/
  # SAVE ARTIFACT --if-exists ./.config AS LOCAL ./output/buildroot.config
  # # SAVE ARTIFACT --if-exists ./defconfig AS LOCAL ./output/buildroot.defconfig
  # # SAVE ARTIFACT --if-exists ./output/buildroot.defconfig AS LOCAL ./output/buildroot.defconfig

  # build
  # host
  # images
  # staging
  # target  

all:
  # BUILD +run
  BUILD +source
  BUILD +toolchain
  # BUILD +sdk
  BUILD +image

buildroot:
  FROM ghcr.io/undancer/buildroot:latest

  # DO +COPY_SELF

  COPY --if-exists ./output/dl /buildroot/dl
  COPY --if-exists ./output/ccache ./.buildroot-ccache

  COPY . .

source:
  FROM +buildroot

  RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) kernel_latest_defconfig
  # RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) initrdfs_latest_defconfig
  RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) source

  # DO +SAVE_SELF

  SAVE ARTIFACT --if-exists /buildroot/dl/* AS LOCAL ./output/dl/
  SAVE ARTIFACT --if-exists ./output/*.* AS LOCAL ./output/

toolchain:
  FROM +source

  RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) toolchain

  # RUN ls -aln ./output/
  # RUN tree -L 2 -d ./output
  # RUN find ./output -type d -maxdepth 2
  # RUN ls -aln ./output/images
  
  # DO +SAVE_SELF

  SAVE ARTIFACT --if-exists ./output/*.* AS LOCAL ./output/
  SAVE ARTIFACT --if-exists ./.buildroot-ccache/* AS LOCAL ./output/ccache/

sdk:
  FROM +toolchain

  RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) sdk

  # RUN find ./output/image* -type d -maxdepth 2
  # RUN ls -aln ./output/images
  # DO +SAVE_SELF
  
  SAVE ARTIFACT --if-exists ./output/images/ AS LOCAL ./output/images

image:
  FROM +toolchain

  RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd)

  RUN find ./output -type d -maxdepth 2

  # DO +SAVE_SELF

  SAVE ARTIFACT --if-exists ./output/images/ AS LOCAL ./output/images
  SAVE ARTIFACT --if-exists /buildroot/dl/* AS LOCAL ./output/dl/
  SAVE ARTIFACT --if-exists ./.buildroot-ccache/* AS LOCAL ./output/ccache/

run:
  FROM +buildroot

  # RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) allyesconfig
  # RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) allyespackageconfig
  # RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) savedefconfig
  
  # RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) initrdfs_latest_defconfig
  # RUN make -C /buildroot O=$(pwd)/output BR2_EXTERNAL=$(pwd) source

  # SAVE ARTIFACT ./output/* AS LOCAL ./output/

